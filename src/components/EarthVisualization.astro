---
// src/components/EarthVisualization.astro
export interface Props {
    class?: string;
}

const { class: className } = Astro.props;
---

<div id="earth-container" class={className}>
	<div id="info">
		<a href="https://threejs.org" target="_blank" rel="noopener">three.js webgpu</a> - earth
		<br>
		Based on <a href="https://threejs-journey.com/lessons/earth-shaders" target="_blank" rel="noopener">Three.js Journey</a> lesson
		<br>
		Earth textures from <a href="https://www.solarsystemscope.com/textures/" target="_blank" rel="noopener">Solar System Scope</a>
	</div>
</div>

<style>
    #earth-container {
        width: 100%;
        height: 100vh;
        position: relative;
        overflow: hidden;
        background: #000;
    }

    #info {
        position: absolute;
        top: 10px;
        left: 10px;
        color: white;
        z-index: 100;
        font-size: 14px;
        line-height: 1.4;
        font-family: Arial, sans-serif;
    }

    #info a {
        color: #4db2ff;
        text-decoration: none;
    }

    #info a:hover {
        text-decoration: underline;
    }
</style>

<script>
    // This script will run on the client side
    import * as THREE from 'three';

    // You'll need to handle the WebGPU and TSL imports differently
    // This is a simplified version - you may need to adjust based on your Three.js setup

    let camera: THREE.PerspectiveCamera;
    let scene: THREE.Scene;
    let renderer: THREE.WebGLRenderer; // Use WebGL instead of WebGPU for better compatibility
    let globe: THREE.Mesh;
    let clock: THREE.Clock;

    function init() {
        const container = document.getElementById('earth-container');
        if (!container) return;

        clock = new THREE.Clock();

        // Scene setup
        scene = new THREE.Scene();

        // Camera setup
        camera = new THREE.PerspectiveCamera(
            25,
            container.clientWidth / container.clientHeight,
            0.1,
            100
        );
        camera.position.set(4.5, 2, 3);

        // Lighting
        const sun = new THREE.DirectionalLight('#ffffff', 2);
        sun.position.set(0, 0, 3);
        scene.add(sun);

        // Basic Earth sphere (simplified version)
        const textureLoader = new THREE.TextureLoader();
        const earthTexture = textureLoader.load('/textures/planets/earth_day_4096.jpg');

        const sphereGeometry = new THREE.SphereGeometry(1, 64, 64);
        const earthMaterial = new THREE.MeshPhongMaterial({
            map: earthTexture
        });

        globe = new THREE.Mesh(sphereGeometry, earthMaterial);
        scene.add(globe);

        // Renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(container.clientWidth, container.clientHeight);
        container.appendChild(renderer.domElement);

        // Start animation
        animate();

        // Handle resize
        window.addEventListener('resize', onWindowResize);
    }

    function onWindowResize() {
        const container = document.getElementById('earth-container');
        if (!container) return;

        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    }

    function animate() {
        requestAnimationFrame(animate);

        const delta = clock.getDelta();
        globe.rotation.y += delta * 0.025;

        renderer.render(scene, camera);
    }

    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', init);
</script>
